$date
	Mon May 16 03:19:30 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$var integer 32 # count [31:0] $end
$var integer 32 $ fp_w [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$scope module ALU_Ctrl $end
$var wire 2 % ALUOp [1:0] $end
$var wire 4 & instr [3:0] $end
$var reg 4 ' ALU_Ctrl_o [3:0] $end
$upscope $end
$scope module Branch_Adder $end
$var wire 32 ( src1_i [31:0] $end
$var wire 32 ) src2_i [31:0] $end
$var reg 32 * sum_o [31:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 + MemRead_i $end
$var wire 1 , MemWrite_i $end
$var wire 32 - addr_i [31:0] $end
$var wire 1 . clk_i $end
$var wire 32 / data_i [31:0] $end
$var wire 32 0 data_o [31:0] $end
$var integer 32 1 i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 32 2 instr_i [31:0] $end
$var reg 2 3 ALUOp [1:0] $end
$var reg 1 4 ALUSrc $end
$var reg 1 5 Branch $end
$var reg 1 6 Jump $end
$var reg 1 7 MemRead $end
$var reg 1 8 MemWrite $end
$var reg 1 9 MemtoReg $end
$var reg 1 : RegWrite $end
$upscope $end
$scope module EXEtoMEM $end
$var wire 3 ; Mem_i [2:0] $end
$var wire 3 < WB_i [2:0] $end
$var wire 5 = WBreg_i [4:0] $end
$var wire 32 > alu_ans_i [31:0] $end
$var wire 1 ? clk_i $end
$var wire 32 @ instr_i [31:0] $end
$var wire 32 A pc_add4_i [31:0] $end
$var wire 1 B rst_i $end
$var wire 32 C rtdata_i [31:0] $end
$var wire 1 D zero_i $end
$var reg 3 E Mem_o [2:0] $end
$var reg 3 F WB_o [2:0] $end
$var reg 5 G WBreg_o [4:0] $end
$var reg 32 H alu_ans_o [31:0] $end
$var reg 32 I instr_o [31:0] $end
$var reg 32 J pc_add4_o [31:0] $end
$var reg 32 K rtdata_o [31:0] $end
$var reg 1 L zero_o $end
$upscope $end
$scope module FWUnit $end
$var wire 5 M EXEMEM_RD [4:0] $end
$var wire 1 N EXEMEM_RegWrite $end
$var wire 5 O IDEXE_RS1 [4:0] $end
$var wire 5 P IDEXE_RS2 [4:0] $end
$var wire 5 Q MEMWB_RD [4:0] $end
$var wire 1 R MEMWB_RegWrite $end
$var reg 2 S ForwardA [1:0] $end
$var reg 2 T ForwardB [1:0] $end
$upscope $end
$scope module Hazard_detection_obj $end
$var wire 1 U IDEXE_memRead $end
$var wire 5 V IDEXE_regRd [4:0] $end
$var wire 5 W IFID_regRs [4:0] $end
$var wire 5 X IFID_regRt [4:0] $end
$var reg 1 Y IFID_write $end
$var reg 1 Z PC_write $end
$var reg 1 [ control_output_select $end
$upscope $end
$scope module IDtoEXE $end
$var wire 3 \ Exe_i [2:0] $end
$var wire 2 ] Mem_i [1:0] $end
$var wire 3 ^ WB_i [2:0] $end
$var wire 5 _ WBreg_i [4:0] $end
$var wire 4 ` alu_ctrl_instr [3:0] $end
$var wire 1 a clk_i $end
$var wire 32 b data1_i [31:0] $end
$var wire 32 c data2_i [31:0] $end
$var wire 32 d immgen_i [31:0] $end
$var wire 32 e instr_i [31:0] $end
$var wire 32 f pc_add4_i [31:0] $end
$var wire 1 g rst_i $end
$var reg 3 h Exe_o [2:0] $end
$var reg 2 i Mem_o [1:0] $end
$var reg 3 j WB_o [2:0] $end
$var reg 5 k WBreg_o [4:0] $end
$var reg 4 l alu_ctrl_input [3:0] $end
$var reg 32 m data1_o [31:0] $end
$var reg 32 n data2_o [31:0] $end
$var reg 32 o immgen_o [31:0] $end
$var reg 32 p instr_o [31:0] $end
$var reg 32 q pc_add4_o [31:0] $end
$upscope $end
$scope module IFtoID $end
$var wire 32 r address_i [31:0] $end
$var wire 1 s clk_i $end
$var wire 1 t flush $end
$var wire 32 u instr_i [31:0] $end
$var wire 32 v pc_add4_i [31:0] $end
$var wire 1 w rst_i $end
$var reg 32 x address_o [31:0] $end
$var reg 32 y instr_o [31:0] $end
$var reg 32 z pc_add4_o [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 { addr_i [31:0] $end
$var wire 32 | instr_o [31:0] $end
$var integer 32 } i [31:0] $end
$upscope $end
$scope module ImmGen $end
$var wire 32 ~ instr_i [31:0] $end
$var reg 32 !" Imm_Gen_o [31:0] $end
$upscope $end
$scope module MEMtoWB $end
$var wire 32 "" DM_i [31:0] $end
$var wire 3 #" WB_i [2:0] $end
$var wire 5 $" WBreg_i [4:0] $end
$var wire 32 %" alu_ans_i [31:0] $end
$var wire 1 &" clk_i $end
$var wire 32 '" pc_add4_i [31:0] $end
$var wire 1 (" rst_i $end
$var reg 32 )" DM_o [31:0] $end
$var reg 3 *" WB_o [2:0] $end
$var reg 5 +" WBreg_o [4:0] $end
$var reg 32 ," alu_ans_o [31:0] $end
$var reg 32 -" pc_add4_o [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 ." data0_i [31:0] $end
$var wire 32 /" data1_i [31:0] $end
$var wire 1 0" select_i $end
$var reg 32 1" data_o [31:0] $end
$upscope $end
$scope module MUX_ALU_src1 $end
$var wire 32 2" data0_i [31:0] $end
$var wire 32 3" data1_i [31:0] $end
$var wire 32 4" data2_i [31:0] $end
$var wire 2 5" select_i [1:0] $end
$var reg 32 6" data_o [31:0] $end
$upscope $end
$scope module MUX_ALU_src2 $end
$var wire 32 7" data0_i [31:0] $end
$var wire 32 8" data1_i [31:0] $end
$var wire 32 9" data2_i [31:0] $end
$var wire 2 :" select_i [1:0] $end
$var reg 32 ;" data_o [31:0] $end
$upscope $end
$scope module MUX_MemtoReg $end
$var wire 32 <" data0_i [31:0] $end
$var wire 32 =" data1_i [31:0] $end
$var wire 32 >" data2_i [31:0] $end
$var wire 2 ?" select_i [1:0] $end
$var reg 32 @" data_o [31:0] $end
$upscope $end
$scope module MUX_PCSrc $end
$var wire 32 A" data0_i [31:0] $end
$var wire 32 B" data1_i [31:0] $end
$var wire 1 C" select_i $end
$var reg 32 D" data_o [31:0] $end
$upscope $end
$scope module MUX_control $end
$var wire 32 E" data0_i [31:0] $end
$var wire 32 F" data1_i [31:0] $end
$var wire 1 G" select_i $end
$var reg 32 H" data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 I" clk_i $end
$var wire 32 J" pc_i [31:0] $end
$var wire 1 K" rst_i $end
$var reg 32 L" pc_o [31:0] $end
$upscope $end
$scope module PC_plus_4_Adder $end
$var wire 32 M" src1_i [31:0] $end
$var wire 32 N" src2_i [31:0] $end
$var reg 32 O" sum_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 P" RDaddr_i [4:0] $end
$var wire 32 Q" RDdata_i [31:0] $end
$var wire 5 R" RSaddr_i [4:0] $end
$var wire 32 S" RSdata_o [31:0] $end
$var wire 5 T" RTaddr_i [4:0] $end
$var wire 32 U" RTdata_o [31:0] $end
$var wire 1 V" RegWrite_i $end
$var wire 1 W" clk_i $end
$var wire 1 X" rst_i $end
$upscope $end
$scope module SL1 $end
$var wire 32 Y" data_i [31:0] $end
$var reg 32 Z" data_o [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 [" ALU_control [3:0] $end
$var wire 1 \" rst_n $end
$var wire 32 ]" src1 [31:0] $end
$var wire 32 ^" src2 [31:0] $end
$var reg 32 _" result [31:0] $end
$var reg 1 `" zero $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x`"
bx _"
bz ^"
bz ]"
z\"
bz ["
bx Z"
bz Y"
zX"
zW"
zV"
bx U"
bz T"
bx S"
bz R"
bz Q"
bz P"
bx O"
bz N"
bz M"
bx L"
zK"
bz J"
zI"
bx H"
zG"
bz F"
bz E"
bx D"
zC"
bz B"
bz A"
bx @"
bz ?"
bz >"
bz ="
bz <"
bx ;"
bz :"
bz 9"
bz 8"
bz 7"
bx 6"
bz 5"
bz 4"
bz 3"
bz 2"
bx 1"
z0"
bz /"
bz ."
bx -"
bx ,"
bx +"
bx *"
bx )"
z("
bz '"
z&"
bz %"
bz $"
bz #"
bz ""
bx !"
bz ~
b100000 }
bx |
bz {
bx z
bx y
bx x
zw
bz v
bz u
zt
zs
bz r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
zg
bz f
bz e
bz d
bz c
bz b
za
bz `
bz _
bz ^
bz ]
bz \
x[
xZ
xY
bz X
bz W
bz V
zU
bx T
bx S
zR
bz Q
bz P
bz O
zN
bz M
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
zD
bz C
zB
bz A
bz @
z?
bz >
bz =
bz <
bz ;
x:
x9
x8
x7
x6
x5
x4
bx 3
bz 2
b10000000 1
bx 0
bz /
z.
bz -
z,
z+
bx *
bz )
bz (
bx '
bz &
bz %
b10000000000000000000000000000011 $
b0 #
0"
0!
$end
#25000
b1 #
1!
#50000
0!
1"
#75000
b10 #
1!
#100000
0!
#125000
b11 #
1!
#150000
0!
#175000
b100 #
1!
#200000
0!
#225000
b101 #
1!
#250000
0!
#275000
b110 #
1!
#300000
0!
#325000
b111 #
1!
#350000
0!
#375000
b1000 #
1!
#400000
0!
#425000
b1001 #
1!
#450000
0!
#475000
b1010 #
1!
#500000
0!
#525000
b1011 #
1!
#550000
0!
#575000
b1100 #
1!
#600000
0!
#625000
b1101 #
1!
#650000
0!
#675000
b1110 #
1!
#700000
0!
#725000
b1111 #
1!
#750000
0!
#775000
b10000 #
1!
#800000
0!
#825000
b10001 #
1!
#850000
0!
#875000
b10010 #
1!
#900000
0!
#925000
b10011 #
1!
#950000
0!
#975000
b10100 #
1!
#1000000
0!
#1025000
b10101 #
1!
#1050000
0!
#1075000
b10110 #
1!
#1100000
0!
#1125000
b10111 #
1!
#1150000
0!
#1175000
b11000 #
1!
#1200000
0!
#1225000
b11001 #
1!
#1250000
0!
#1275000
b11010 #
1!
#1300000
0!
#1325000
b11011 #
1!
#1350000
0!
#1375000
b11100 #
1!
#1400000
0!
#1425000
b11101 #
1!
#1450000
0!
#1475000
b11110 #
1!
#1500000
0!
#1525000
b11111 #
1!
#1550000
0!
#1575000
b100000 #
1!
#1600000
0!
#1625000
b100001 #
1!
#1650000
0!
#1675000
b100010 #
1!
#1700000
0!
#1725000
b100011 #
1!
#1750000
0!
#1775000
b100100 #
1!
#1800000
0!
